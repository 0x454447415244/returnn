#!crnn/rnn.py
# kate: syntax python;

import os
demo_name, _ = os.path.splitext(__file__)
print("Hello, experiment: %s" % demo_name)

# task
use_tensorflow = True
task = "train"

# data
num_inputs = 10
num_outputs = 10

train = {"class": "TaskEpisodicCopyDataset", "num_seqs": 1000}
dev = {"class": "TaskEpisodicCopyDataset", "num_seqs": 100, "fixed_random_seed": 42}
cache_size = "0"
window = 1

# network
# (also defined by num_inputs & num_outputs)
network = {
"lstm0_fw" : { "class": "rec", "unit": "lstmp", "n_out" : 500, "dropout": 0.0, "L2": 0.01, "direction": 1 },
"lstm0_bw" : { "class": "rec", "unit": "lstmp", "n_out" : 500, "dropout": 0.0, "L2": 0.01, "direction": -1 },

"lstm1_fw" : { "class": "rec", "unit": "lstmp", "n_out" : 500, "dropout": 0.0, "L2": 0.01, "direction": 1, "from" : ["lstm0_fw", "lstm0_bw"] },
"lstm1_bw" : { "class": "rec", "unit": "lstmp", "n_out" : 500, "dropout": 0.0, "L2": 0.01, "direction": -1, "from" : ["lstm0_fw", "lstm0_bw"] },

"lstm2_fw" : { "class": "rec", "unit": "lstmp", "n_out" : 500, "dropout": 0.0, "L2": 0.01, "direction": 1, "from" : ["lstm1_fw", "lstm1_bw"] },
"lstm2_bw" : { "class": "rec", "unit": "lstmp", "n_out" : 500, "dropout": 0.0, "L2": 0.01, "direction": -1, "from" : ["lstm1_fw", "lstm1_bw"] },

"encoder": {"class": "copy", "from": ["lstm2_fw", "lstm2_bw"]},
"enc_ctx": {"class": "linear", "activation": "tanh", "from": ["encoder"], "n_out": 100},

"output": {"class": "rec", "unit": {
    'orth_embed': {'class': 'linear', 'activation': None, 'from': ['data:classes'], "n_out": 50},
    "s": {"class": "rnn_cell", "unit": "LSTMBlock", "from": ["prev:c", "prev:orth_embed"], "n_out": 500},
    "c_in": {"class": "linear", "activation": "tanh", "from": ["s", "prev:orth_embed"], "n_out": 100},
    "c": {"class": "global_attention_context", "from": ["c_in"], "base": "base:encoder", "base_ctx": "base:enc_ctx", "n_out": 1000},
    "output": {"class": "softmax", "from": ["prev:s", "c"], "target": "classes"}
}, "target": "classes", "loss": "ce"}

}

# trainer
batching = "random"
batch_size = 5000
max_seqs = 40
chunking = "0"
truncation = -1
pretrain = "default"
pretrain_construction_algo = "from_input"
gradient_clip = 0
adam = True
#gradient_noise = 0.3
learning_rate = 0.0005
learning_rate_file = "newbob.data"
learning_rate_control = "newbob"
model = "/tmp/crnn.%s.network" % demo_name
num_epochs = 100
save_interval = 20

# log
log_verbosity = 5

