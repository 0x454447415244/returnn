#!crnn/rnn.py
# kate: syntax python;

import os
demo_name, _ = os.path.splitext(__file__)
print("Hello, experiment: %s" % demo_name)

# task
use_tensorflow = True
task = "train"

# data
num_inputs = 10
num_outputs = {"data": [num_inputs,1], "classes": [num_inputs,1]}
train = {"class": "CopyTaskDataset", "nsymbols": num_inputs, "num_seqs": 1000, "minlen": 1, "maxlen_epoch_factor": 20}
dev = {"class": "CopyTaskDataset", "nsymbols": num_inputs, "num_seqs": 50, "minlen": 1, "maxlen_epoch_factor": 20}

batch_size = 5000
max_seqs = 10
chunking = "0"

_isize = 5
l2 = 0.01

network = {
    "input": {"class": "linear", "activation": "tanh", "n_out": 20},

    "decoder": {"class": "rec", "from": [], "size_target": "classes", "unit": {
        # "dt": {"class": "constant", "value": 1.0, "from": []},  # that trivially learns 0% FER
        "dt_in": {"class": "linear", "activation": "tanh", "n_out": 20, "from": ["prev:output", "prev:att_comb", "prev:dt"], "L2": l2},
        "dt": {"class": "linear", "activation": "2*sigmoid", "n_out": 1, "from": ["dt_in"], "L2": l2},
        "t": {"class": "combine", "kind": "add", "n_out": 1, "from": ["prev:t", "dt"], "initial_output": -1, "L2": l2},
        "att": {"class": "gauss_window_attention", "window_size": 10, "inner_size": _isize, "from": ["t"], "base": "base:input"},  # shape: (batch,_isize,input.n_out)
        "att_comb": {"class": "combine_dims", "axes": "non_spatial", "from": ["att"]},  # shape: (batch,input.n_out * _isize)
        "output": {"class": "linear", "activation": "tanh", "from": ["att_comb"], "n_out": 20, "L2": l2}
    }},

    "output": {"class": "softmax", "from": ["decoder"], "loss": "ce"}
}

adam = True
learning_rate = 0.01
gradient_noise = 0.3
model = "/tmp/%s/crnn/%s/model" % (os.getlogin(), demo_name)  # https://github.com/tensorflow/tensorflow/issues/6537
num_epochs = 100
save_interval = 20
log_verbosity = 4

